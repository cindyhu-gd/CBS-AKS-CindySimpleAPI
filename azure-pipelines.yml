# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

resources:
  repositories:
    - repository: templates
      type: github
      endpoint: Green-Dot-Corporation
      name: Green-Dot-Corporation/re-ado-pipelines
      ref: RE-42897
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: GetUpdatedConfigFiles
  jobs:
    - job: ParseCommitHash
      displayName: Parse Commit Hash
      steps:
        - checkout: self
        - task: Bash@3
          displayName: check repo structure
          inputs:
            targetType: 'inline'
            script: |
              pwd
              ls -la
        - task: Bash@3
          name: gitconfig
          inputs:
            targetType: 'inline'
            script: |
              #echo "git config --list"
              #git config --list
              #echo "git fetch"
              #git fetch
              echo "git branch"
              git branch
              echo "git branch -a"
              git branch -a
              echo "git remote -v"
              git remote -v
              echo "git fetch -all"
              git fetch --all
              echo "git tag -l"
              git tag -l
              echo "git switch $(Build.SourceBranchName)"
              git switch $(Build.SourceBranchName)
              #echo "##[debug]uild.SourceBranchName: $(Build.SourceBranchName)"
              #git checkout $(Build.SourceBranchName)
              ls -la .
              #git checkout $(Build.SourceBranchName)
              echo "git status"
              git status
              #git checkout main
              git diff --name-only --diff-filter=d main~ main
        
        - task: Bash@3
          displayName: check files under $(Build.ArtifactStagingDirectory)
          inputs:
            targetType: 'inline'
            script: |
              dir '$(Build.ArtifactStagingDirectory)'

          #Setting variables to be used in future steps
        - task: Bash@3
          name: setvarStep
          displayName: 'Set Variables'
          inputs:
            targetType: 'inline'
            script: |
              fullrepo="$(Build.Repository.Name)"
              prefix="cindyhu-gd/";
              REPO=${fullrepo#$prefix}
              IFS='-' read -ra REPO_PARTS <<< "${REPO}"
              
              echo "##[debug]REPO: $REPO"
              echo "##vso[task.setvariable variable=org;isOutput=true]${REPO_PARTS[0]}"
              echo "##vso[task.setvariable variable=component;isOutput=true]${REPO_PARTS[2]}"
              echo "##vso[task.setvariable variable=repo;isOutput=true]${REPO}"

        - task: Bash@3
          displayName: Create build_info.json
          inputs:
            targetType: 'inline'
            script: |
              cd '$(Build.ArtifactStagingDirectory)'
              echo | tee ./build_info.json <<EOF
              {
                "JiraIssueKey": "RE-42897",
                "RepoName": "$(setvarStep.repo)",
                "CommitHash": "$(Build.SourceVersion)"
              }
              EOF
              ls -l .
        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: 'chart'
            path: $(Build.ArtifactStagingDirectory)

    - job: PublishREScripts
      steps:
        - checkout: templates
        - task: Bash@3
          displayName: Copy RE scripts
          inputs:
            targetType: 'inline'
            script: |
              echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
              pwd
              ls -la
              mkdir -p publish
              cp -f "scripts/AddDeployResultOnJiraIssue.sh" publish/
              ls -l .
        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: 'RE'
            path: publish
